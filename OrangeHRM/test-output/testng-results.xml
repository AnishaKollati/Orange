<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="1" passed="0" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-12-02T23:55:47 IST" name="Default suite" finished-at="2020-12-02T23:55:48 IST" duration-ms="1703">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.feature(cucumber.api.testng.CucumberFeatureWrapper)[pri:0, instance:runner.testrunner@5f9b2141]" name="feature" class="cucumber.api.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2020-12-02T23:55:47 IST" name="Default test" finished-at="2020-12-02T23:55:48 IST" duration-ms="1703">
      <class name="runner.testrunner">
        <test-method is-config="true" signature="setUpClass()[pri:0, instance:runner.testrunner@5f9b2141]" started-at="2020-12-02T23:55:47 IST" name="setUpClass" finished-at="2020-12-02T23:55:47 IST" duration-ms="591" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="feature(cucumber.api.testng.CucumberFeatureWrapper)[pri:0, instance:runner.testrunner@5f9b2141]" started-at="2020-12-02T23:55:47 IST" name="feature" description="Runs Cucumber Feature" data-provider="features" finished-at="2020-12-02T23:55:48 IST" duration-ms="342" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[EssEmployee Details]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[nodeName cannot be null or empty]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: nodeName cannot be null or empty
at com.aventstack.extentreports.ExtentTest.createNode(ExtentTest.java:133)
at com.aventstack.extentreports.ExtentTest.createNode(ExtentTest.java:195)
at com.cucumber.listener.ExtentCucumberFormatter.scenarioOutline(ExtentCucumberFormatter.java:105)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at cucumber.runtime.Utils$1.call(Utils.java:40)
at cucumber.runtime.Timeout.timeout(Timeout.java:16)
at cucumber.runtime.Utils.invoke(Utils.java:34)
at cucumber.runtime.RuntimeOptions$1.invoke(RuntimeOptions.java:294)
at com.sun.proxy.$Proxy20.scenarioOutline(Unknown Source)
at gherkin.formatter.model.ScenarioOutline.replay(ScenarioOutline.java:18)
at cucumber.runtime.model.StepContainer.format(StepContainer.java:31)
at cucumber.runtime.model.CucumberScenarioOutline.formatOutlineScenario(CucumberScenarioOutline.java:52)
at cucumber.runtime.model.CucumberScenarioOutline.run(CucumberScenarioOutline.java:41)
at cucumber.runtime.model.CucumberFeature.run(CucumberFeature.java:165)
at cucumber.api.testng.TestNGCucumberRunner.runCucumber(TestNGCucumberRunner.java:63)
at cucumber.api.testng.AbstractTestNGCucumberTests.feature(AbstractTestNGCucumberTests.java:21)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- feature -->
        <test-method is-config="true" signature="writeExtentReport()[pri:0, instance:runner.testrunner@5f9b2141]" started-at="2020-12-02T23:55:48 IST" name="writeExtentReport" finished-at="2020-12-02T23:55:48 IST" duration-ms="36" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- writeExtentReport -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:runner.testrunner@5f9b2141]" started-at="2020-12-02T23:55:48 IST" name="tearDownClass" finished-at="2020-12-02T23:55:48 IST" duration-ms="482" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- runner.testrunner -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
